<?php

namespace App\Http\Controllers;

use App\Bill;
use App\BillDetail;
use App\Cart;
use App\Customer;
use App\Http\Controllers\Controller;

use App\Product;
use App\ProductType;
use App\SLide;
use App\User;
use Auth;
use Hash;

use Illuminate\Http\Request;

use Illuminate\Support\Facades\DB;
use Session;

class PageController extends Controller {
	function __construct() {
		$loai_sp = DB::table('type_products')->get();
		view()->share('loai_sp ', $loai_sp);
	}
	public function getindex() {
		$slide       = Slide::all();
		$new_product = Product::where('new', 1)->paginate(8);
		$sanphamkh   = Product::where('promotion_price', '<>', 0)->paginate(6);
		return view('page.trangchu', compact('slide', 'new_product', 'sanphamkh'));
	}
	public function getloaisp($type) {
		$sp_theoloai = Product::where('id_type', $type)->get();
		$sp_khac     = Product::where('id_type', '<>', $type)->paginate(6);
		$loai        = ProductType::all();
		$loai_sp     = ProductType::where('id', $type)->first();
		return view('page.loaisp', compact('sp_theoloai', 'sp_khac', 'loai', 'loai_sp'));
	}
	public function getchitietsp(Request $request) {
		$sanpham    = Product::where('id', $request->id)->first();
		$sp_tuongtu = Product::where('id_type', $request->id_type)->paginate(3);
		return view('page.chitietsp', compact('sanpham', 'sp_tuongtu'));
	}
	public function getlienhe() {
		return view('page.lienhe');
	}
	public function getgioithieu() {
		return view('page.gioithieu');
	}
	public function getAddtoCart(Request $req, $id) {
		$product = Product::find($id);
		$oldcart = Session::has('cart')?Session::get('cart'):null;
		$cart    = new Cart($oldcart);
		$cart->add($product, $id);
		$req->session()->put('cart', $cart);
		return redirect()->back();
	}
	public function getDeltoCart($id) {
		$product = Product::find($id);
		$oldcart = Session::has('cart')?Session::get('cart'):null;
		$cart    = new Cart($oldcart);
		$cart->removeItem($id);
		if (count($cart->items) > 0) {
			session()     ->put('cart', $cart);
		} else {
			session()->forget('cart');
		}
		return redirect()->back();
	}
	public function getdathang() {
		return view('page.dathang');
	}

	public function postdathang(Request $req) {
		$cart = Session::get('cart');

		$customer               = new Customer;
		$customer->name         = $req->name;
		$customer->gender       = $req->gender;
		$customer->email        = $req->email;
		$customer->address      = $req->address;
		$customer->note         = $req->notes;
		$customer->phone_number = $req->phone;
		$customer->save();

		$bill              = new Bill;
		$bill->id_customer = $customer->$id;
		$bill->date_oder   = date('Y-m-d');
		$bill->total       = $cart->totalPrice;
		$bill->payment     = $req->payment_method;
		$bill->note        = $req->note;
		$bill->save();

		foreach ($cart->items as $key => $value) {
			$bill_detail             = new BillDetail;
			$bill_detail->id_bill    = $bill->id;
			$bill_detail->id_product = $key;
			$bill_detail->quantity   = $value['qty'];
			$bill_detail->unit_price = $value['price']/$value['qty'];
			$bill_detail->save();
		}

		Session::forget('cart');
		return redirect()->back()->with('thongbao', 'đặt hàng thàng công');
	}
	public function getsearch(Request $req) {
		$product = Product::where('name', 'like', '%'.$req->key.'%')->orWhere('unit_price', $req->key)->get();
		return view('page.search', compact('product'));
	}
	public function getdangnhap() {
		return view('page.dangnhap');
	}
	public function getdangky() {
		return view('page.dangky');
	}
	public function postdangky(Request $req) {
		$this->validate($req,
			[
				'email'       => 'requireq|email|unique:user,email',
				'password'    => 'requireq|min:6|max:20',
				'fullname'    => 'requireq',
				're_password' => 'requireq|same:password'
			],
			[
				'email.requireq'    => 'vui lòng nhập email',
				'email.email'       => 'không đúng định dạng email',
				'email.unique'      => 'email đã được đăng ký',
				'password.requireq' => 'vui lòng nhập lại mật khẩu',
				're_password.same'  => 'mật khẩu không giống nhau',
				'password.min'      => 'mật khẩu phải có 6 ký tự trở lên'
			]);
		$user            = new User();
		$user->full_name = $req->fullname;
		$user->email     = $req->email;
		$user->password  = Hash::make($req->password);
		$user->phone     = $req->phone;
		$user->address   = $req->address;

		$user->save();

		return redirect()->back()->with('thanhcong', 'tạo tài khoản thành công');
	}
	public function postdangnhap(Request $req) {
		$this->validate($req, [
				'email'    => 'required|email',
				'password' => 'requireq|min:6|max:20',
			],
			[
				'email.required'    => 'nhập lại email',
				'email.email'       => 'không đúng định dạng email',
				'password.required' => 'vui lòng nhập đúng mật khẩu',
				'password.min'      => 'nhập ít nhát 6 ký tự',
				'password.max'      => 'nhập nhiều nhất 20 ký tự'
			]);

		$credential = array('email' => $req->email, 'password' => $req->password);
		if (Auth::atempt($credential)) {
			return redirect()->back()->with(['flag' => 'success', 'thongbao' => 'đăng nhập thành công']);
		} else {
			return redirect()->back()->with(['flag' => 'danger', 'thongbao' => 'đăng nhập thất bại']);
		}
	}
	public function postdangxuat(Request $req) {
		Auth::logout();
		return redirect()->route('trang-chu');
	}
}
